{"version":3,"sources":["components/Task.js","components/TaskForm.js","components/EditTaskForm.js","App.js","index.js"],"names":["Task","task","index","toggleStatus","deleteTask","editTask","toggleComp","style","textDecoration","completed","className","onClick","complexity","title","status","color","fontWeight","TaskForm","addTask","useState","value","setValue","onSubmit","e","preventDefault","type","onChange","target","placeholder","autoFocus","EditTaskForm","props","currentTask","setTask","useEffect","event","updateTask","id","console","log","App","tasks","setTasks","editing","setEditing","setCurrentTask","newTasks","splice","updatedTask","map","text","length","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.863a6017.chunk.js","sourcesContent":["import React from \"react\";\n\n// component for individual classes\nfunction Task({ task, index, toggleStatus, deleteTask, editTask, toggleComp }) {\n  \n  return (\n    // ternary operator styles on complete or not\n    <div\n      style={{ textDecoration: task.completed ? \"line-through\" : \"\" }}\n      className=\"task\"\n    >\n      <button className=\"btn rnd\" onClick={() => toggleComp(index)}>\n          {task.complexity}\n        </button>\n      {task.title}\n      <div>\n        <button className=\"btn\" onClick={() => editTask(task)}>\n          Edit\n        </button>\n        <button className=\"btn toggleStatus\" onClick={() => toggleStatus(index)}>\n          {task.status}\n        </button>\n        <button className=\"btn\" style={{ color: 'red', fontWeight: '800' }} onClick={() => deleteTask(index)}>\n          X\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Task;\n","import React, { useState } from \"react\";\n\n// component for adding tasks to list\nfunction TaskForm({ addTask }) {\n  // hooks w/ state for new tasks\n  const [value, setValue] = useState(\"\");\n  // submit handler for new tasks\n  const handleSubmit = e => {\n    e.preventDefault(); // prevent form sub & page reload\n    if (!value) return;\n    addTask(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"taskForm\"\n        value={value} // state value comes in here\n        onChange={e => setValue(e.target.value)} // use the hook to set the new val\n        placeholder=\"Add task. . .\"\n        autoFocus\n      />\n    </form>\n  );\n}\n\nexport default TaskForm;\n","import React, { useState, useEffect } from \"react\";\n\nconst EditTaskForm = props => {\n  const [task, setTask] = useState(props.currentTask);\n\n  const handleInputChange = event => {\n    console.log(event.target.value)\n    setTask({ ...task, title: event.target.value });\n  };\n\n  useEffect(() => {\n    setTask(props.currentTask)\n  }, [props])\n\n  return (\n    <form onSubmit={event => {\n      event.preventDefault()\n\n      props.updateTask(task.id, task)\n    }}>\n      <input\n        type=\"text\"\n        className=\"taskForm edit\"\n        value={task.title} // state value comes in here\n        onChange={handleInputChange} // use the hook to set the new val\n      />\n    </form>\n  );\n};\n\nexport default EditTaskForm;\n","import React, { useState } from \"react\";\nimport Task from \"./components/Task\";\nimport TaskForm from \"./components/TaskForm\";\nimport EditTaskForm from \"./components/EditTaskForm\";\n\n// HOC component\nfunction App() {\n  // hooks w/ state for tasks\n  const [tasks, setTasks] = useState([\n    {\n      id: 0,\n      title: \"Complete Arbetsprov TaskList Challenge\",\n      status: \"Active\",\n      complexity: 5\n    },\n    {\n      id: 1,\n      title: \"Get a job offer\",\n      status: \"Pending\",\n      complexity: 5\n    },\n    {\n      id: 2,\n      title: \"Drink beer\",\n      status: \"Completed\",\n      complexity: 5\n    },\n    {\n      id: 3,\n      title: \"Refactor code\",\n      status: \"Active\",\n      complexity: 5\n    },\n    {\n      id: 4,\n      title: \"Write tests for remaining items\",\n      status: \"Deleted\",\n      complexity: 5\n    }\n  ]);\n\n  const [editing, setEditing] = useState(false);\n\n  const initialFormState = { id: null, title: \"\", status: \"\", completed: null };\n\n  const [currentTask, setCurrentTask] = useState(initialFormState);\n\n  const updateTask = (id, updatedTask) => {\n    setEditing(false);\n\n    setTasks(tasks.map(task => (task.id === id ? updatedTask : task)));\n  };\n\n  const editTask = task => {\n    if (editing === false) {\n      setEditing(true);\n\n      setCurrentTask({\n        id: task.id,\n        title: task.title,\n        status: task.status,\n        complexity: 5\n      });\n    } else {\n      setEditing(false);\n    }\n  };\n\n  const toggleStatus = index => {\n    const newTasks = [...tasks];\n    switch (newTasks[index].status) {\n      case \"Pending\":\n        newTasks[index].status = \"Active\";\n        break;\n      case \"Active\":\n        newTasks[index].status = \"Completed\";\n        break;\n      case \"Completed\":\n        newTasks[index].status = \"Deleted\";\n        break;\n      case \"Deleted\":\n        newTasks[index].status = \"Pending\";\n        break;\n      default:\n        newTasks[index].status = \"Pending\";\n    }\n    setTasks(newTasks);\n  };\n\n  // send new task props to TaskForm via addTask\n  const addTask = text => {\n    const newTasks = [\n      ...tasks,\n      { id: tasks.length + 1, title: text, status: \"Pending\", complexity: 5 }\n    ];\n    setTasks(newTasks);\n  };\n\n  const deleteTask = index => {\n    const newTasks = [...tasks];\n    newTasks.splice(index, 1);\n    setTasks(newTasks);\n  };\n\n  const toggleComp = index => {\n    const newTasks = [...tasks];\n    newTasks[index].complexity += 1;\n    if (newTasks[index].complexity === 11) newTasks[index].complexity = 0;\n    setTasks(newTasks);\n  };\n\n  // iterate over current tasks here, display in page, inc. addTask\n  return (\n    <div>\n      <h1 className=\"title\">Task List</h1>\n      <div className=\"taskList\">\n        {editing ? (\n          <EditTaskForm\n            editing={editing}\n            setEditing={setEditing}\n            currentTask={currentTask}\n            updateTask={updateTask}\n          />\n        ) : (\n          <TaskForm addTask={addTask} />\n        )}\n        <h3 className=\"subtitle\">Active</h3>\n        {tasks.map((task, index) => (\n          task.status === \"Active\" ?\n          <Task\n            task={task}\n            key={index}\n            index={index}\n            toggleStatus={toggleStatus}\n            deleteTask={deleteTask}\n            editTask={editTask}\n            toggleComp={toggleComp}\n          /> : \"\"\n        ))}\n        <h3 className=\"subtitle\">Completed</h3>\n        {tasks.map((task, index) => (\n          task.status === \"Completed\" ?\n          <Task\n            task={task}\n            key={index}\n            index={index}\n            toggleStatus={toggleStatus}\n            deleteTask={deleteTask}\n            editTask={editTask}\n            toggleComp={toggleComp}\n          /> : \"\"\n        ))}\n        <h3 className=\"subtitle\">Pending</h3>\n        {tasks.map((task, index) => (\n          task.status === \"Pending\" ?\n          <Task\n            task={task}\n            key={index}\n            index={index}\n            toggleStatus={toggleStatus}\n            deleteTask={deleteTask}\n            editTask={editTask}\n            toggleComp={toggleComp}\n          /> : \"\"\n        ))}\n        <h3 className=\"subtitle\">Deleted</h3>\n        {tasks.map((task, index) => (\n          task.status === \"Deleted\" ?\n          <Task\n            task={task}\n            key={index}\n            index={index}\n            toggleStatus={toggleStatus}\n            deleteTask={deleteTask}\n            editTask={editTask}\n            toggleComp={toggleComp}\n          /> : \"\"\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}