{"version":3,"sources":["components/Task.js","components/TaskForm.js","components/EditTaskForm.js","App.js","index.js"],"names":["Task","task","index","completeTask","deleteTask","editTask","style","textDecoration","completed","className","title","onClick","TaskForm","addTask","useState","value","setValue","onSubmit","e","preventDefault","type","onChange","target","placeholder","autoFocus","EditTaskForm","props","currentTask","setTask","useEffect","event","updateTask","id","console","log","App","status","tasks","setTasks","editing","setEditing","setCurrentTask","newTasks","splice","updatedTask","map","text","length","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26f0c0ee.chunk.js","sourcesContent":["import React from \"react\";\n\n// component for individual classes\nfunction Task({ task, index, completeTask, deleteTask, editTask }) {\n  return (\n    // ternary operator styles on complete or not\n    <div\n      style={{ textDecoration: task.completed ? \"line-through\" : \"\" }}\n      className=\"task\"\n    >\n      {task.title}\n      <div>\n        <button className=\"btn\" onClick={() => editTask(task)}>\n          Edit\n        </button>\n        <button className=\"btn\" onClick={() => completeTask(index)}>\n          Complete\n        </button>\n        <button className=\"btn\" onClick={() => deleteTask(index)}>\n          Delete\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Task;\n","import React, { useState } from \"react\";\n\n// component for adding tasks to list\nfunction TaskForm({ addTask }) {\n  // hooks w/ state for new tasks\n  const [value, setValue] = useState(\"\");\n  // submit handler for new tasks\n  const handleSubmit = e => {\n    e.preventDefault(); // prevent form sub & page reload\n    if (!value) return;\n    addTask(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"taskForm\"\n        value={value} // state value comes in here\n        onChange={e => setValue(e.target.value)} // use the hook to set the new val\n        placeholder=\"Add task. . .\"\n        autoFocus\n      />\n    </form>\n  );\n}\n\nexport default TaskForm;\n","import React, { useState, useEffect } from \"react\";\n\nconst EditTaskForm = props => {\n  const [task, setTask] = useState(props.currentTask);\n\n  const handleInputChange = event => {\n    console.log(event.target.value)\n    setTask({ ...task, title: event.target.value });\n  };\n\n  useEffect(() => {\n    setTask(props.currentTask)\n  }, [props])\n\n  return (\n    <form onSubmit={event => {\n      event.preventDefault()\n\n      props.updateTask(task.id, task)\n    }}>\n      <input\n        type=\"text\"\n        className=\"editTaskForm\"\n        value={task.title} // state value comes in here\n        onChange={handleInputChange} // use the hook to set the new val\n      />\n    </form>\n  );\n};\n\nexport default EditTaskForm;\n","import React, { useState } from \"react\";\nimport Task from \"./components/Task\";\nimport TaskForm from \"./components/TaskForm\";\nimport EditTaskForm from \"./components/EditTaskForm\";\n\n// HOC component\nfunction App() {\n  // hooks w/ state for tasks\n  const [tasks, setTasks] = useState([\n    {\n      id: 0,\n      title: \"Complete Arbetsprov TaskList Challenge\",\n      status: \"active\",\n      completed: false\n    },\n    {\n      id: 1,\n      title: \"Get a job offer\",\n      status: \"on hold\",\n      completed: false\n    },\n    {\n      id: 2,\n      title: \"Drink beer\",\n      status: \"on hold\",\n      completed: true\n    }\n  ]);\n\n  const [editing, setEditing] = useState(false);\n\n  const initialFormState = { id: null, title: \"\", status: \"\", completed: null };\n\n  const [currentTask, setCurrentTask] = useState(initialFormState);\n\n  const updateTask = (id, updatedTask) => {\n    setEditing(false);\n\n    setTasks(tasks.map(task => (task.id === id ? updatedTask : task)));\n  };\n\n  const editTask = task => {\n    if (editing === false) {\n      setEditing(true);\n\n      setCurrentTask({\n        id: task.id,\n        title: task.title,\n        status: task.status,\n        completed: task.completed\n      });\n    } else {\n      setEditing(false);\n    }\n  };\n\n  const completeTask = index => {\n    const newTasks = [...tasks];\n    newTasks[index].completed = !newTasks[index].completed;\n    setTasks(newTasks);\n  };\n\n  // send new task props to TaskForm via addTask\n  const addTask = text => {\n    const newTasks = [\n      ...tasks,\n      { id: tasks.length + 1, title: text, status: \"on hold\", completed: false }\n    ];\n    setTasks(newTasks);\n  };\n\n  const deleteTask = index => {\n    const newTasks = [...tasks];\n    newTasks.splice(index, 1);\n    setTasks(newTasks);\n  };\n\n  // iterate over current tasks here, display in page, inc. addTask\n  return (\n    <div>\n      <h1 className=\"title\">Task List</h1>\n      <div className=\"taskList\">\n        {editing ? (\n          <EditTaskForm\n            editing={editing}\n            setEditing={setEditing}\n            currentTask={currentTask}\n            updateTask={updateTask}\n          />\n        ) : (\n          <TaskForm addTask={addTask} />\n        )}\n        {tasks.map((task, index) => (\n          <Task\n            task={task}\n            key={index}\n            index={index}\n            completeTask={completeTask}\n            deleteTask={deleteTask}\n            editTask={editTask}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}